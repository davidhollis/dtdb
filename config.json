{
  // Configuration options available for the dbdt server:

  database: {
    // The connection URL for diesel
    // If database_url is absent, it'll be pulled from the environment ($DATABASE_URL)
    // This is for ease of development since a bunch of diesel's tooling expects to
    // find it there. In production, it should live in config.json.

    // url: "postgres://dtdb:dtdbpassword@localhost:5437/dtdb_dev",

    connection_pool: {
      // The maximum number of open connections in the pool (default: 10)
      // max_size: 10,

      // The minimum number of idle connections to keep in the pool
      // If unset, this defaults to max_size. If greater than max_size, the maximum
      // will still be respected.
      // min_idle_count: 10,

      // The maximum amount of time to keep a connection in the pool (default: 30 minutes)
      // If the time for a connection expires while the connection is checked out, it
      // will be closed when it's next returned to the pool.
      // max_lifetime_ms: 1800000,

      // The maximum amount of time to hold a connection open while it's been continuously
      // idle (default: 10 minutes)
      // idle_timeout_ms: 600000,

      // The maximum amount of time to wait for a valid connection when trying to check
      // one out (default: 30 seconds)
      // connection_timeout_ms: 30000,

      // When we select a connection to return when a client checks one out, should we
      // make sure that connection still works? (default: true)
      // test_connection_on_checkout: true,
    }
  },

  // The socket to listen on
  bind: {
    // Listen on a network socket
    socket: {
      address: "0.0.0.0",
      port: 6474,
    },

    // Listen on a unix domain socket
    // unix_socket: {
    //   path: "/var/run/dtdb.sock"
    // },
  },

  // log4rs config. See [the docs](https://docs.rs/log4rs/1.2.0/log4rs/index.html#configuration)
  // for more info. All options are supported.
  log: {
    appenders: {
      stderr: {
        kind: "console",
        target: "stderr",
      },
    },
    root: {
      level: "warn",
      appenders: ["stderr"],
    },
    loggers: {
      server: {
        level: "info",
      },
      dtdb: {
        level: "debug",
      },
      tower_http: {
        level: "info"
      }
    },
  },
}